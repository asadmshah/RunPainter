apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'jacoco-android'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        manifestPlaceholders = [
                databaseProviderAuthority: rootProject.ext.databaseProviderAuthority,
        ]

        buildConfigField "String", "DATABASE_PROVIDER_AUTHORITY", "\"rootProject.ext.databaseProviderAuthority\""
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'

            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        mock {
            applicationId 'com.asadmshah.runpainter.mock'
        }

        prod {
            applicationId 'com.asadmshah.runpainter'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        warningsAsErrors true
        abortOnError false
        xmlReport false
        htmlReport true
        checkReleaseBuilds false

        lintConfig rootProject.file('quality/lint.xml')
        htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile     libs.supportAppcompat
    compile     libs.supportPreference
    compile     libs.supportAnnotations
    compile     libs.supportDesign
    compile     libs.autoparcel
    apt         libs.autoparcelProcessor
    compile     libs.dagger
    apt         libs.daggerCompiler
    provided    libs.jsr250

    testCompile libs.junit
    testCompile libs.truth
    testCompile libs.mockito

    androidTestCompile libs.supportAnnotations
    androidTestCompile libs.junit
    androidTestCompile libs.truth
    androidTestCompile libs.testRules
    androidTestCompile libs.testRunner
    androidTestCompile libs.espressoCore
    androidTestCompile (libs.espressoContrib) {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
    }
    androidTestCompile libs.espressoIdlingRes
}

task grantMockAnimationPermission(type: Exec) {
    commandLine "adb shell pm grant com.asadmshah.runpainter.mock.debug android.permission.SET_ANIMATION_SCALE".split(' ')
}

task grantProdAnimationPermission(type: Exec) {
    commandLine "adb shell pm grant com.asadmshah.runpainter.debug android.permission.SET_ANIMATION_SCALE".split(' ')
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('installMockDebugAndroidTest')) {
        task.doLast  {
            grantMockAnimationPermission
        }
    }
    if (task.name.startsWith('installProdDebugAndroidTest')) {
        task.doLast {
            grantProdAnimationPermission
        }
    }
}